#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'DisseminateMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 2

# The Active Message type associated with this message.
AM_TYPE = 147

class DisseminateMsg(tinyos.message.Message.Message):
    # Create a new DisseminateMsg of size 2.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=2):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <DisseminateMsg> \n"
        try:
            s += "  [id=0x%x]\n" % (self.get_id())
        except:
            pass
        try:
            s += "  [sensor=0x%x]\n" % (self.get_sensor())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: id
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'id' is signed (False).
    #
    def isSigned_id(self):
        return False
    
    #
    # Return whether the field 'id' is an array (False).
    #
    def isArray_id(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'id'
    #
    def offset_id(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'id'
    #
    def offsetBits_id(self):
        return 0
    
    #
    # Return the value (as a short) of the field 'id'
    #
    def get_id(self):
        return self.getUIntElement(self.offsetBits_id(), 8, 1)
    
    #
    # Set the value of the field 'id'
    #
    def set_id(self, value):
        self.setUIntElement(self.offsetBits_id(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'id'
    #
    def size_id(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'id'
    #
    def sizeBits_id(self):
        return 8
    
    #
    # Accessor methods for field: sensor
    #   Field type: short
    #   Offset (bits): 8
    #   Size (bits): 8
    #

    #
    # Return whether the field 'sensor' is signed (False).
    #
    def isSigned_sensor(self):
        return False
    
    #
    # Return whether the field 'sensor' is an array (False).
    #
    def isArray_sensor(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'sensor'
    #
    def offset_sensor(self):
        return (8 / 8)
    
    #
    # Return the offset (in bits) of the field 'sensor'
    #
    def offsetBits_sensor(self):
        return 8
    
    #
    # Return the value (as a short) of the field 'sensor'
    #
    def get_sensor(self):
        return self.getUIntElement(self.offsetBits_sensor(), 8, 1)
    
    #
    # Set the value of the field 'sensor'
    #
    def set_sensor(self, value):
        self.setUIntElement(self.offsetBits_sensor(), 8, value, 1)
    
    #
    # Return the size, in bytes, of the field 'sensor'
    #
    def size_sensor(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of the field 'sensor'
    #
    def sizeBits_sensor(self):
        return 8
    
